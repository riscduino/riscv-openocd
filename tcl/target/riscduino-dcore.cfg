# SPDX-License-Identifier: GPL-2.0-or-later
# OpenOCD configuration file for Riscduino Dual core target

source [find ch347.cfg]

jtag newtap ycr_core1 cpu -irlen 5 -expected-id 0xdeb11c05                                                      
jtag newtap ycr_core0 cpu -irlen 5 -expected-id 0xdeb10c05     

target create ycr_core1.cpu riscv -endian little -chain-position ycr_core1.cpu -coreid 1    
#ycr_core1.cpu configure -rtos hwthread                                                       
ycr_core1.cpu configure -rtos none                 
#SRAM uncache at 0x0c00_0000 at 1MB                                      
ycr_core1.cpu configure -work-area-phys 0x0C000000 -work-area-size 0x100000 -work-area-backup 0
#ycr_core1.cpu riscv expose_csrs 3008-3015,4033-4034                                          


target create ycr_core0.cpu riscv -endian little -chain-position ycr_core0.cpu -coreid 0    
#ycr_core0.cpu configure -rtos hwthread                                                       
ycr_core0.cpu configure -rtos none                                                       
ycr_core0.cpu configure -work-area-phys 0x0C000000 -work-area-size 0x100000 -work-area-backup 0
#ycr_core0.cpu riscv expose_csrs 3008-3015,4033-4034                                          


flash bank onboard_spi_flash rqspi 0x00000000 0 0 0 ycr_core0.cpu 0x10000000

init

proc riscduino-load {file} {
	echo "flashing Erase is in progress"
        flash erase_sector 0 0 1
        echo "flashing program: $file"
        flash write_image $file 0x00000000
        echo "flashing verify: $file"
      	verify_image $file 0x04000000
}

proc riscduino-halt {} {
    echo "Halting the Riscv Core-0"
    ycr_core0.cpu arp_halt
    echo "Halting the Riscv Core-1"
    ycr_core1.cpu arp_halt

}

proc riscduino-reset {}  {
    #Set the Soft Reboot with + Spi Init Bypass
    echo "Soft Reset to SOC"
    #mww 0x10020034 0xC0001A00
    ycr_core0.cpu arp_reset assert 0
    ycr_core1.cpu arp_reset assert 1
    ycr_core0.cpu arp_reset deassert 0
    ycr_core1.cpu arp_reset deassert 0
}

proc riscduino-resume {}  {
    #Set the Soft Reboot with + Spi Init Bypass
    echo "Soft Reset to SOC"
    ycr_core0.cpu resume
    ycr_core1.cpu resume
}

proc riscduino-post-verify {} {
	# `reset halt` not correctly works.
	# toggles the nSRST directly.
	ch347 set_signal nSRST 0
	ch347 set_signal nSRST z
	shutdown
}

proc riscv_boot { } {

    #Setting Serial Flash to Quad Mode
    mww 0x10000004 0x619800EB
    mww 0x1000000C 0x408a0003
    mww 0x10000010 0x708a0002

    #sleep 1000

    #mwb 0x40023000 0x70
    #mww 0x40023008 0xFFFF03FF
    #mww 0x40023004 0x43840000
    #mwb 0x40023000 0x80

    #sleep 2
}


#configure openocd to halt execution when gdb session start.
ycr_core0.cpu configure -event gdb-attach {
        riscduino-reset
        halt
        gdb_breakpoint_override hard
}

ycr_core1.cpu configure -event gdb-attach {
        riscduino-reset
        halt
        gdb_breakpoint_override hard
}

#configure openocd to resume execution when gdb session start.
ycr_core0.cpu configure -event gdb-detach {
    resume
}

#configure openocd to resume execution when gdb session ends.
ycr_core1.cpu configure -event gdb-detach {
    resume
}

